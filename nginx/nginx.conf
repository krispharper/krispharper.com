user nginx;
worker_processes 4;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    merge_slashes off;

    log_format main 'INFO $time_iso8601 $remote_addr $host "$request" $request_length $status $body_bytes_sent $request_time $upstream_addr $upstream_response_time';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    sendfile on;

    keepalive_timeout 65;

    client_max_body_size 0;

    ssl_certificate /etc/letsencrypt/live/krispharper.com-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/krispharper.com-0001/privkey.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    upstream wordpress {
        server wordpress:80;
    }

    upstream transmission {
        server kharper.synology.me:8000;
    }

    upstream nas {
        server kharper.synology.me:5000;
    }

    upstream plex {
        server kharper.synology.me:32400;
    }

    upstream moviematch {
        server kharper.synology.me:9000;
    }

    upstream tautulli {
        server kharper.synology.me:8181;
    }

    upstream sonarr {
        server kharper.synology.me:8000;
    }

    upstream radarr {
        server kharper.synology.me:8000;
    }

    upstream jackett {
        server kharper.synology.me:8000;
    }

    upstream crashplan {
        server kharper.synology.me:5800;
    }

    upstream pi-hole {
        server kharper.synology.me:8080;
    }

    # transmission (http)
    server {
        listen 80;
        server_name transmission.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # transmission (https)
    server {
        listen 443 ssl;
        server_name transmission.krispharper.com;

        location / {
            return 301 https://$server_name/transmission;
        }

        location /transmission {
            proxy_pass http://transmission;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # plex (http)
    server {
        listen 80;
        server_name plex.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # plex (https)
    server {
        listen 443 ssl;
        server_name plex.krispharper.com;

        location / {
            # https://gist.github.com/spikegrobstein/4384954
            # If a request to / comes in, 301 redirect to the main plex page,
            # But only if it doesn't contain the X-Plex-Device-Name header.
            # This fixes a bug where you get permission issues when accessing the web dashboard.

            if ($http_x_plex_device_name = '') {
                rewrite ^/$ http://$http_host/web/index.html;
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect off;

            proxy_pass http://plex;
        }
    }

    # moviematch (http)
    server {
        listen 80;
        server_name moviematch.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # moviematch (https)
    server {
        listen 443 ssl;
        server_name moviematch.krispharper.com;

        location / {
            proxy_pass http://moviematch;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /ws {
            proxy_pass http://moviematch;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }
    }

    # tautulli (http)
    server {
        listen 80;
        server_name tautulli.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # tautulli (https)
    server {
        listen 443 ssl;
        server_name tautulli.krispharper.com;

        location / {
            proxy_pass http://tautulli;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # nas (http)
    server {
        listen 80;
        server_name nas.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # nas (https)
    server {
        listen 443 ssl;
        server_name nas.krispharper.com;

        location / {
            proxy_pass http://nas;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # sonarr (http)
    server {
        listen 80;
        server_name sonarr.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # sonarr (https)
    server {
        listen 443 ssl;
        server_name sonarr.krispharper.com;

        location / {
            return 301 https://$server_name/sonarr;
        }

        location /sonarr {
            proxy_pass http://sonarr;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # radarr (http)
    server {
        listen 80;
        server_name radarr.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # radarr (https)
    server {
        listen 443 ssl;
        server_name radarr.krispharper.com;

        location / {
            return 301 https://$server_name/radarr;
        }

        location /radarr {
            proxy_pass http://radarr;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # jackett (http)
    server {
        listen 80;
        server_name jackett.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # jackett (https)
    server {
        listen 443 ssl;
        server_name jackett.krispharper.com;

        location / {
            return 301 https://$server_name/jackett;
        }

        location /jackett {
            proxy_pass http://jackett;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # crashplan (http)
    server {
        listen 80;
        server_name crashplan.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # crashplan (https)
    server {
        listen 443 ssl;
        server_name crashplan.krispharper.com;

        auth_basic "Crashpan";
        auth_basic_user_file /.htpasswd;

        location / {
            proxy_pass http://crashplan;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /websockify {
            proxy_pass http://crashplan;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_read_timeout 86400;
        }
    }

    # pi-hole (http)
    server {
        listen 80;
        server_name pi-hole.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # pi-hole (https)
    server {
        listen 443 ssl;
        server_name pi-hole.krispharper.com;

        location / {
            proxy_pass http://pi-hole;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # paulaclareharper.com (http)
    server {
        listen 80;
        server_name paulaclareharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # paulaclareharper.com (https)
    server {
        listen 443 ssl;
        server_name paulaclareharper.com;

        location / {
            proxy_pass http://wordpress;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # * (http)
    server {
        listen 80 default_server;
        server_name *.krispharper.com;

        location /.well-known {
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # * (https)
    server {
        listen 443 ssl default_server;
        server_name *.krispharper.com;

        location / {
            proxy_pass http://wordpress;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
